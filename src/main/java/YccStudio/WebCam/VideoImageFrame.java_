package YccStudio.WebCam;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;
import org.bytedeco.javacpp.opencv_core;
import org.bytedeco.javacpp.opencv_core.IplImage;
import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.FrameGrabber.Exception;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.bytedeco.javacv.OpenCVFrameConverter;

public abstract class VideoImageFrame {
    
    public static void main(String[] args) throws Exception {
	randomGrabberFFmpegImage("e:/lyz/ffmpeg.mp4", "./target", "screenshot", 5);
    }

    /**
     * 生成圖片縮圖
     * 
     * @param filePath：視訊完整路徑
     * @param targerFilePath：縮圖存放目錄
     * @param targetFileName：縮圖檔名稱
     * @param randomSize：生成隨機數的數量
     * @throws Exception
     */
    public static void randomGrabberFFmpegImage(String filePath, String targerFilePath, String targetFileName,
	    int randomSize) throws Exception {
	FFmpegFrameGrabber ff = FFmpegFrameGrabber.createDefault(filePath);
	ff.start();
	String rotate = ff.getVideoMetadata("rotate");
	int ffLength = ff.getLengthInFrames();
	List<Integer> randomGrab = random(ffLength, randomSize);
	int maxRandomGrab = randomGrab.get(randomGrab.size() - 1);
	Frame f;
	int i = 0;
	while (i < ffLength) {
	    f = ff.grabImage();
	    if (randomGrab.contains(i)) {
		if (null != rotate && rotate.length() > 1) {
		    OpenCVFrameConverter.ToIplImage converter = new OpenCVFrameConverter.ToIplImage();
		    IplImage src = converter.convert(f);
		    org.bytedeco.javacpp.opencv_core.IplImage y;
		    org.bytedeco.opencv.opencv_core.IplImage x;
		    f = converter.convert(rotate(src, Integer.valueOf(rotate)));
		}
		doExecuteFrame(f, targerFilePath, targetFileName, i);
	    }
	    if (i >= maxRandomGrab) {
		break;
	    }
	    i++;
	}
	ff.stop();
    }

    /**
     * 旋轉圖片
     * 
     * @param src：圖片
     * @param angle:旋轉角度
     * @return
     */
    public static IplImage rotate(IplImage src, int angle) {
	IplImage img = IplImage.create(src.height(), src.width(), src.depth(), src.nChannels());
	opencv_core.cvTranspose(src, img);
	opencv_core.cvFlip(img, img, angle);
	return img;
    }

    /**
     * 生成縮圖
     * 
     * @param f              Frame物件
     * @param targerFilePath
     * @param targetFileName
     * @param index
     */
    public static void doExecuteFrame(Frame f, String targerFilePath, String targetFileName, int index) {
	if (null == f || null == f.image) {
	    return;
	}
	Java2DFrameConverter converter = new Java2DFrameConverter();
	String imageMat = "png";
	String FileName = targerFilePath + File.separator + targetFileName + "_" + index + "." + imageMat;
	BufferedImage bi = converter.getBufferedImage(f);
	File output = new File(FileName);
	try {
	    ImageIO.write(bi, imageMat, output);
	} catch (IOException e) {
	    e.printStackTrace();
	}
    }

    /**
     * 隨機生成隨機數集合
     * 
     * @param baseNum：隨機種子
     * @param length：隨機數集合長度
     * @return：隨機數集合
     */
    public static List<Integer> random(int baseNum, int length) {
	List<Integer> list = new ArrayList<>(length);
	while (list.size() < length) {
	    Integer next = (int) (Math.random() * baseNum);
	    if (list.contains(next)) {
		continue;
	    }
	    list.add(next);
	}
	Collections.sort(list);
	return list;
    }
}
